{"version":3,"sources":["assets/easy_web.m4v","components/mic_controller.js","karaoke_page.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mic_container","UserMedia","toDestination","Mic_controller","useState","mic_active","set_mic_state","useEffect","interval","setInterval","state","clearInterval","Fragment","className","width","height","viewBox","fill","xmlns","d","fillRule","onClick","open","then","catch","e","Karaoke_page","class","id","controls","preload","data-setup","src","EASY_VIDEO","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,sC,yPCIrCC,G,QAAgB,IAAIC,KAAYC,iBAEvB,SAASC,IAAkB,IAAD,EACLC,mBAAS,WADJ,mBAClCC,EADkC,KACtBC,EADsB,KAIvCC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BH,EAAcN,EAAcU,SAC3B,KACH,OAAO,kBAAMC,cAAcH,MAC1B,IAaH,OACE,kBAAC,IAAMI,SAAP,KACkB,YAAfP,EACC,yBAAKQ,UAAU,eACb,6BACE,yBACEA,UAAU,UACVC,MAAM,QACNC,OAAO,QACPC,QAAQ,YACRC,KAAK,aACLC,MAAM,8BAEN,0BAAMC,EAAE,0CACR,0BACEC,SAAS,UACTD,EAAE,sKAIR,yBAAKN,UAAU,WACb,uBAAGA,UAAU,cAAb,2BAIJ,yBAAKA,UAAU,eACb,6BACE,yBACEA,UAAU,UACVC,MAAM,QACNC,OAAO,QACPC,QAAQ,YACRC,KAAK,MACLC,MAAM,8BAEN,0BACEE,SAAS,UACTD,EAAE,sXAIR,yBAAKN,UAAU,WACb,uBAAGA,UAAU,cAAb,uBACA,uBAAGA,UAAU,aAAaQ,QAtDnB,WACfrB,EACGsB,OACAC,MAAK,WACJjB,EAAcN,EAAcU,UAE7Bc,OAAM,SAACC,GACNnB,EAAcN,EAAcU,YA+CxB,wB,OCjEG,SAASgB,IACtB,OACE,yBAAKb,UAAU,qBACb,kBAAC,EAAD,MAGA,2BAEIc,MAAM,WACNC,GAAG,gBACHb,OAAO,QACPD,MAAM,QACNe,UAAQ,EACRC,QAAQ,OACRC,aAAW,MACb,4BAAQC,IAAKC,IAAYC,KAAK,cAC9B,uBAAGP,MAAM,aAAT,+F,OClBO,SAASQ,IACtB,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,OCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e79d4dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/easy_web.a30e9bcf.m4v\";","import React, { useState, useEffect } from \"react\";\nimport { UserMedia } from \"tone\";\nimport \"../styles/mic_controller.css\";\n\nconst mic_container = new UserMedia().toDestination();\n\nexport default function Mic_controller() {\n  var [mic_active, set_mic_state] = useState(\"stopped\");\n\n  //ping the mic status every 5 seconds.\n  useEffect(() => {\n    const interval = setInterval(() => {\n      set_mic_state(mic_container.state);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  var detect_mic = () => {\n    mic_container\n      .open()\n      .then(() => {\n        set_mic_state(mic_container.state);\n      })\n      .catch((e) => {\n        set_mic_state(mic_container.state);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      {mic_active === \"started\" ? (\n        <div className=\"mic_overlay\">\n          <div>\n            <svg\n              className=\"mic_svg\"\n              width=\"1.8em\"\n              height=\"1.8em\"\n              viewBox=\"0 0 16 16\"\n              fill=\"lightgreen\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\" />\n              <path\n                fillRule=\"evenodd\"\n                d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"\n              />\n            </svg>\n          </div>\n          <div className=\"mic_cta\">\n            <p className=\"mic_status\">Microphone Connected!</p>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mic_overlay\">\n          <div>\n            <svg\n              className=\"mic_svg\"\n              width=\"1.8em\"\n              height=\"1.8em\"\n              viewBox=\"0 0 16 16\"\n              fill=\"red\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M12.734 9.613A4.995 4.995 0 0 0 13 8V7a.5.5 0 0 0-1 0v1c0 .274-.027.54-.08.799l.814.814zm-2.522 1.72A4 4 0 0 1 4 8V7a.5.5 0 0 0-1 0v1a5 5 0 0 0 4.5 4.975V15h-3a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-3v-2.025a4.973 4.973 0 0 0 2.43-.923l-.718-.719zM11 7.88V3a3 3 0 0 0-5.842-.963L11 7.879zM5 6.12l4.486 4.486A3 3 0 0 1 5 8V6.121zm8.646 7.234l-12-12 .708-.708 12 12-.708.707z\"\n              />\n            </svg>\n          </div>\n          <div className=\"mic_cta\">\n            <p className=\"mic_status\">Microphone Missing!</p>\n            <p className=\"mic_prompt\" onClick={detect_mic}>\n              Detect Microphone\n            </p>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport EASY_VIDEO from \"./assets/easy_web.m4v\";\nimport MIC_CONTROLLER from \"./components/mic_controller\";\nimport \"./styles/karaoke.css\";\n\n\nexport default function Karaoke_page() {\n  return (\n    <div className=\"karaoke_container\">\n      <MIC_CONTROLLER></MIC_CONTROLLER>\n\n      \n      <video\n          \n          class=\"video-js\"\n          id=\"karaoke_video\"\n          height=\"100vh\"\n          width=\"100vw\"\n          controls\n          preload=\"auto\"\n          data-setup='{}'>\n        <source src={EASY_VIDEO} type=\"video/mp4\"></source>\n        <p class=\"vjs-no-js\">\n          To view this video please enable JavaScript, and consider upgrading to a\n          web browser that\n        </p>\n      </video>\n\n    </div>\n  );\n}\n","import React from \"react\";\nimport KARAOKE_PAGE from \"./karaoke_page\";\nimport \"./styles/App.css\";\n//testing\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <KARAOKE_PAGE></KARAOKE_PAGE>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}